{"version":3,"sources":["sidebar.js","projects.js","footer.js","intro.js","App.js","serviceWorker.js","index.js","Images/img.jpg"],"names":["Menu","styled","div","SideBar","className","href","Sections","section","Para","p","Projects","src","images","alt","Footer","TxtType","el","toRotate","period","this","loopNum","parseInt","txt","tick","isDeleting","Intro","class","data-period","data-type","prototype","i","length","fullTxt","substring","innerHTML","that","delta","Math","random","setTimeout","window","onload","elements","document","getElementsByClassName","getAttribute","JSON","parse","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e3c428de.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst Menu = styled.div `\ndisplay: flex;\nflex-flow: column;\nmargin-top: 0%;\nwidth: 10%;\n`\n\nexport default function SideBar () {\n    return (\n      <Menu className= \"menu\">\n        <a className=\"menu-item\" href=\"#Home\">\n          Home\n        </a>\n  \n        <a className=\"menu-item\" href=\"#aboutthedeveloper\">\n          About The Developer\n        </a>\n  \n        <a className=\"menu-item\" href=\"#skills\">\n          Skills\n        </a>\n  \n        <a className=\"menu-item\" href=\"#projects\">\n          Projects\n        </a>\n  \n        <a className=\"menu-item\" href=\"#contact\">\n          Contact\n        </a>\n      </Menu>\n    );\n  };","import React from \"react\";\nimport styled from \"styled-components\";\nimport images from \"/Users/maryclayton/Documents/LambdaSchool/mary-portfolio-site/myapp/src/Images/img.jpg\";\n\nconst Sections = styled.section`\n  display: flex;\n`;\nconst Para = styled.p`\n  color: white;\n  font-size: 1rem;\n`;\n\nexport default function Projects() {\n  return (\n    <div className=\"projectone\">\n      <Sections>\n        <img className=\"sea\" src={images} alt=\"sea\" />\n        <div className=\"columns\">\n          <h2>My Great Idea Page</h2>\n          <Para>\n            This is my first project I worked on at Lambda School. It contains a\n            nav bar, a logo, a header with a page, two rows of content, a middle\n            image, and a contact footer with copyright text. I used pain plain\n            HTML, CSS, and responsive design on this project.\n          </Para>\n        </div>\n      </Sections>\n      <Sections></Sections>\n      <Sections>\n        <img className=\"sea\" src={images} alt=\"sea\" />\n        <div className=\"columns\">\n          <h2>Nasa Photo of the Day</h2>\n          <Para>\n            We did this for our first sprint challenge. It contains a nav bar, a\n            logo, an about section, two rows (Strategy, How We Work, Places We\n            Work, and Collaboration, a \"Let's Work Together\" section, and a\n            bottom nav bar. I used plain HTML and CSS on this project.\n          </Para>\n        </div>\n      </Sections>\n      <Sections>\n        <img className=\"sea\" src={images} alt=\"sea\" />\n        <div className=\"columns\">\n          <h2>React Wars</h2>\n          <Para>lorem ipsum</Para>\n        </div>\n      </Sections>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function Footer () {\n    return (\n        <div>\n            <h2>Projects</h2>\n        </div>\n    )\n}","import React from 'react';\nimport Projects from './projects'\nimport Footer from './footer'\n\nvar TxtType = function(el, toRotate, period) {\n    this.toRotate = toRotate;\n    this.el = el;\n    this.loopNum = 0;\n    this.period = parseInt(period, 10) || 2000;\n    this.txt = '';\n    this.tick();\n    this.isDeleting = false;\n};\n\nTxtType.prototype.tick = function() {\n    var i = this.loopNum % this.toRotate.length;\n    var fullTxt = this.toRotate[i];\n\n    if (this.isDeleting) {\n    this.txt = fullTxt.substring(0, this.txt.length - 1);\n    } else {\n    this.txt = fullTxt.substring(0, this.txt.length + 1);\n    }\n\n    this.el.innerHTML = '<span class=\"wrap\">'+this.txt+'</span>';\n\n    var that = this;\n    var delta = 200 - Math.random() * 100;\n\n    if (this.isDeleting) { delta /= 2; }\n\n    if (!this.isDeleting && this.txt === fullTxt) {\n    delta = this.period;\n    this.isDeleting = true;\n    } else if (this.isDeleting && this.txt === '') {\n    this.isDeleting = false;\n    this.loopNum++;\n    delta = 500;\n    }\n\n    setTimeout(function() {\n    that.tick();\n    }, delta);\n};\n\nwindow.onload = function() {\n    var elements = document.getElementsByClassName('typewrite');\n    for (var i=0; i<elements.length; i++) {\n        var toRotate = elements[i].getAttribute('data-type');\n        var period = elements[i].getAttribute('data-period');\n        if (toRotate) {\n          new TxtType(elements[i], JSON.parse(toRotate), period);\n        }\n    }\n};\nexport default function Intro () {\n    return (\n<div className=\"container\">\n\n<h1> Hi, I am Mary Clayton and I am a\n  <p class=\"typewrite\" data-period=\"2000\" data-type='[ \"software engineer.\", \"designer.\", \"Web Developer.\" ]'>\n    <span class=\"wrap\"></span>\n  </p>\n</h1>\n<Projects /> \n<Footer />\n</div>\n\n)\n}","import React from 'react';\nimport SideBar from './sidebar'\nimport Intro from './intro'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideBar />\n      <Intro />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img.66a4640a.jpg\";"],"sourceRoot":""}